WEEK 12  - Performing Topological Sorting                  DATE: 09.05.24

#include <stdbool.h> 
#include <stdio.h> 
#include <stdlib.h> 

// Structure to represent a stack 
struct Stack { 
	int data; 
	struct Stack* next; 
}; 

struct Graph { 
	int V; // No. of vertices 
	struct List* adj; 
}; 
struct List { 
	int data; 
	struct List* next; 
}; 
struct Stack* createStackNode(int data) 
{ 
	struct Stack* newNode 
		= (struct Stack*)malloc(sizeof(struct Stack)); 
	newNode->data = data; 
	newNode->next = NULL; 
	return newNode; 
} 

struct List* createListNode(int data) 
{ 
	struct List* newNode 
		= (struct List*)malloc(sizeof(struct List)); 
	newNode->data = data; 
	newNode->next = NULL; 
	return newNode; 
} 

struct Graph* createGraph(int V) 
{ 
	struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph)); 

	graph->V = V; 
	graph->adj 
		= (struct List*)malloc(V * sizeof(struct List)); 
	for (int i = 0; i < V; ++i) { 
		graph->adj[i].next = NULL; 
	} 
	return graph; 
} 

void addEdge(struct Graph* graph, int v, int w) 
{ 
	struct List* newNode = createListNode(w); 
	newNode->next = graph->adj[v].next; 
	graph->adj[v].next = newNode; 
} 

void topologicalSortUtil(struct Graph* graph, int v, 
						bool visited[], 
						struct Stack** stack) 
{ 
	visited[v] = true; 

	struct List* current = graph->adj[v].next; 
	while (current != NULL) { 
		int adjacentVertex = current->data; 
		if (!visited[adjacentVertex]) { 
			topologicalSortUtil(graph, adjacentVertex, 
								visited, stack); 
		} 
		current = current->next; 
	} 

	 
	struct Stack* newNode = createStackNode(v); 
	newNode->next = *stack; 
	*stack = newNode; 
} 

void topologicalSort(struct Graph* graph) 
{ 
	struct Stack* stack = NULL; 

	bool* visited = (bool*)malloc(graph->V * sizeof(bool)); 
	for (int i = 0; i < graph->V; ++i) { 
		visited[i] = false; 
	} 

	 
	for (int i = 0; i < graph->V; ++i) { 
		if (!visited[i]) { topologicalSortUtil(graph, i, visited, &stack); } 

	} 

	// Print contents of stack 
	while (stack != NULL) { 
		printf("%d ", stack->data); 
		struct Stack* temp = stack; 
		stack = stack->next; 
		free(temp); 
	} 

	// Free allocated memory 
	free(visited); 
	free(graph->adj); 
	free(graph); 
} 

int main() 
{ 

	struct Graph* g = createGraph(6); 
	addEdge(g, 5, 2); 
	addEdge(g, 5, 0); 
	addEdge(g, 4, 0); 
	addEdge(g, 4, 1); 
	addEdge(g, 2, 3); 
	addEdge(g, 3, 1); 

	printf("Topological Sorting Order: "); 
	topologicalSort(g); 

	return 0; 
}

OUTPUT:-

Topological Sorting Order:5 4 2 3 1 0
WEEK 13 - Implementation of Prim’s Algorithm
DATE: 13.05.2024

#include <stdio.h>
#include <stdbool.h>
#define MAX_VERTICES 10
#define INF 999999
int graph[MAX_VERTICES][MAX_VERTICES];
int vertices;
void createGraph() {
int i, j;
printf("Enter the number of vertices: ");
scanf("%d", &vertices);
printf("Enter the adjacency matrix:\n");
for (i = 0; i < vertices; i++) {
for (j = 0; j < vertices; j++) {
scanf("%d", &graph[i][j]);
}
}
}
int findMinKey(int key[], bool mstSet[]) {
int min = INF, min_index;
for (int v = 0; v < vertices; v++) {
if (mstSet[v] == false && key[v] < min) {
min = key[v];
min_index = v;
}
}
return min_index;
}
void printMST(int parent[]) {
printf("Edge \tWeight\n");
for (int i = 1; i < vertices; i++) {
printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}
}
void primMST() {
int parent[vertices];
int key[vertices];
bool mstSet[vertices];
for (int i = 0; i < vertices; i++) {
key[i] = INF;
mstSet[i] = false;
}
key[0] = 0;
parent[0] = -1;
for (int count = 0; count < vertices - 1; count++) {
int u = findMinKey(key, mstSet);
mstSet[u] = true;
for (int v = 0; v < vertices; v++) {
if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v]) {
parent[v] = u;
key[v] = graph[u][v];
}
}
}
printMST(parent);
}
int main() {
createGraph();
primMST();
return 0;
}
OUTPUT
Enter the number of vertices: 2
Enter the adjacency matrix:
22
25
26
26
Edge 	Weight
0 - 1 	26





WEEK 14 - Implementation of Dijkstra’s Algorithm
DATE: 18.05.2024
#include <stdio.h>
#include <stdbool.h>
#define MAX_VERTICES 10
#define INF 999999
int graph[MAX_VERTICES][MAX_VERTICES];
int vertices;
void createGraph() {
int i, j;
printf("Enter the number of vertices: ");
scanf("%d", &vertices);
printf("Enter the adjacency matrix:\n");
for (i = 0; i < vertices; i++) {
for (j = 0; j < vertices; j++) {
scanf("%d", &graph[i][j]);
}
}
}
int minDistance(int dist[], bool sptSet[]) {
int min = INF, min_index;
for (int v = 0; v < vertices; v++) {
if (sptSet[v] == false && dist[v] <= min) {
min = dist[v];
min_index = v;
}
}
return min_index;
}
void printSolution(int dist[]) {
printf("Vertex \t Distance from Source\n");
for (int i = 0; i < vertices; i++) {
printf("%d \t %d\n", i, dist[i]);
}
}void dijkstra(int src) {
int dist[vertices];
bool sptSet[vertices];
for (int i = 0; i < vertices; i++) {
dist[i] = INF;
sptSet[i] = false;
}
dist[src] = 0;
for (int count = 0; count < vertices - 1; count++) {
int u = minDistance(dist, sptSet);
sptSet[u] = true;
for (int v = 0; v < vertices; v++) {
if (!sptSet[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v])
{
dist[v] = dist[u] + graph[u][v];
}
}
}
printSolution(dist);
}
int main() {
createGraph();
int source;
printf("Enter the source vertex: ");
scanf("%d", &source);
dijkstra(source);
return 0;
}
OUTPUT
Enter the number of vertices: 2
Enter the adjacency matrix:
22
22
22
54
Enter the source vertex: 5
Vertex 	 Distance from Source
1	       999999
2	        999999




WEEK 15 - Program to perform Sorting
DATE: 28.05.2024
#include <stdio.h>
#include <stdlib.h>
void swap(int *a, int *b) {
int temp = *a;
*a = *b;
*b = temp;
}
int partition(int arr[], int low, int high) {
int pivot = arr[high];
int i = (low - 1);
for (int j = low; j <= high - 1; j++) {
if (arr[j] < pivot) {
i++;
swap(&arr[i], &arr[j]);
}
}
swap(&arr[i + 1], &arr[high]);
return (i + 1);
}
void quickSort(int arr[], int low, int high) {
if (low < high) {
int pi = partition(arr, low, high);
quickSort(arr, low, pi - 1);
quickSort(arr, pi + 1, high);
}
}
void merge(int arr[], int l, int m, int r) {
int i, j, k;
int n1 = m - l + 1;
int n2 = r - m;
int L[n1], R[n2];
for (i = 0; i < n1; i++)
L[i] = arr[l + i];
for (j = 0; j < n2; j++)
R[j] = arr[m + 1 + j];
i = 0;
j = 0;
k = l;
while (i < n1 && j < n2) {
if (L[i] <= R[j]) {
arr[k] = L[i];
i++;
} else {
arr[k] = R[j];
j++;
}
k++;
}
while (i < n1) {
arr[k] = L[i];
i++;
k++;
}
while (j < n2) {
arr[k] = R[j];
j++;
k++;
}
}
void mergeSort(int arr[], int l, int r) {
if (l < r) {
int m = l + (r - l) / 2;
mergeSort(arr, l, m);
mergeSort(arr, m + 1, r);
merge(arr, l, m, r);
}
}
int main() {
int n;
printf("Enter the number of elements: ");
scanf("%d", &n);
int arr[n];
printf("Enter %d elements:\n", n);
for (int i = 0; i < n; i++) {
scanf("%d", &arr[i]);
}
printf("\nSorting using Quick Sort:\n");
quickSort(arr, 0, n - 1);
for (int i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
printf("\n\nSorting using Merge Sort:\n");
mergeSort(arr, 0, n - 1);
for (int i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
return 0;
}
OUTPUT
Enter the number of elements: 3
Enter 3 elements:
123
145
639

Sorting using Quick Sort:
123 145 639 

Sorting using Merge Sort:
123 145 639

WEEK 16 - Implementation of Collision Resolution
DATE: 29.05.2024
Techniques
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define TABLE_SIZE 10
typedef struct Node {
int data;
struct Node* next;
} Node;
Node* createNode(int data) {
Node* newNode = (Node*)malloc(sizeof(Node));
if (newNode == NULL) {
printf("Memory allocation failed!\n");
exit(1);
}
newNode->data = data;
newNode->next = NULL;
return newNode;
}
int hashFunction(int key) {
return key % TABLE_SIZE;
}
Node* insertOpenAddressing(Node* table[], int key) {
int index = hashFunction(key);
while (table[index] != NULL) {
index = (index + 1) % TABLE_SIZE;
}
table[index] = createNode(key);
return table[index];
}
void displayHashTable(Node* table[]) {
printf("Hash Table:\n");
for (int i = 0; i < TABLE_SIZE; i++) {
printf("%d: ", i);
Node* current = table[i];
while (current != NULL) {
printf("%d ", current->data);
current = current->next;
}
printf("\n");
}
}
Node* insertClosedAddressing(Node* table[], int key) {
int index = hashFunction(key);
if (table[index] == NULL) {
table[index] = createNode(key);
} else {
Node* newNode = createNode(key);
newNode->next = table[index];
table[index] = newNode;
}
return table[index];
}
int rehashFunction(int key, int attempt) {
// Double Hashing Technique
return (hashFunction(key) + attempt * (7 - (key % 7))) % TABLE_SIZE;
}
Node* insertRehashing(Node* table[], int key) {
int index = hashFunction(key);
int attempt = 0;
while (table[index] != NULL) {
attempt++;
index = rehashFunction(key, attempt);
}
table[index] = createNode(key);
return table[index];
}
int main() {
Node* openAddressingTable[TABLE_SIZE] = {NULL};
Node* closedAddressingTable[TABLE_SIZE] = {NULL};
Node* rehashingTable[TABLE_SIZE] = {NULL};
// Insert elements into hash tables
insertOpenAddressing(openAddressingTable, 10);
insertOpenAddressing(openAddressingTable, 20);
insertOpenAddressing(openAddressingTable, 5);
insertClosedAddressing(closedAddressingTable, 10);
insertClosedAddressing(closedAddressingTable, 20);
insertClosedAddressing(closedAddressingTable, 5);
insertRehashing(rehashingTable, 10);
insertRehashing(rehashingTable, 20);
insertRehashing(rehashingTable, 5);
// Display hash tables
displayHashTable(openAddressingTable);
displayHashTable(closedAddressingTable);
displayHashTable(rehashingTable);
return 0;
}
OUTPUT
Hash Table:
0: 10 
1: 20 
2: 
3: 
4: 
5: 5 
6: 
7: 
8: 
9: 
Hash Table:
0: 20 10 
1: 
2: 
3: 
4: 
5: 5 
6: 
7: 
8: 
9: 
Hash Table:
0: 10 
1: 20 
2: 
3: 
4: 
5: 5 
6: 
7: 
8: 
9:

 
